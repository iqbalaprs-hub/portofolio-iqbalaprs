openapi: 3.0.1
info:
  title: Twitter-clone API
  description: API to control twitter-clone
  version: 3.1.0
servers:
  - url: http://localhost:3001/api
paths:
  /auth/register:
    post:
      summary: Register as new user (Sign Up)
      description: Endpoint to register a new user with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: john
                email:
                  type: string
                  format: email
                  description: the email must be a valid email and must be unique to each user (two or more users cannot have the same email)
                  example: john@gmail.com
                username:
                  type: string
                  description: the username must be unique to each user (two or more users cannot have the same email). Only the special characters (period, dash and underscore) are not allowed
                  example: john
                password:
                  type: string
                  description: (1) minimum length of eight characters, (2) at least one letter, (3)at least one number
                  minLength: 8
                  example: Clonejohn23
              required:
                - name
                - email
                - username
                - password
      responses:
        "201":
          description: User registration (Sign Up) successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    $ref: "#/components/schemas/Token"
        "400":
          description: |
            Registration not successfull (user was not created). This can occur for one of the following reasons:
            - Email already taken, 
            - Username already taken, 
            - \"email\" must be a valid email,
            - \"email\" is not allowed to be empty,
            - \"email\" is required, 
            - password must be at least 8 characters, 
            - password must contain at least 1 letter and 1 number
            - \"password\" is not allowed to be empty
            - "\"password\" is required
        "500":
          description: |
            Registration not succesfull (user was not created). This can occur:
            - "User validation failed: username: username must only contain numbers, letters, \".\", \"-\", \"_\""
  /auth/login:
    post:
      summary: User login
      description: Endpoint to make a user member login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username or email of the user.
                  example: john
                password:
                  type: string
                  description: The user's password.
                  example: Clonejohn23
              required:
                - username
                - password
      responses:
        "200":
          description: User authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    $ref: "#/components/schemas/Token"
        "400":
          description: |
            Sign In not successfull (user was not created). This can occur for one of the following reasons:
            - Invalid login credentials
            - \"username\" is not allowed to be empty
            - \"password\" is not allowed to be empty
            - \"password\" is required
            - \"username\" is required
  /tweets:
    get:
      summary: Get a list of tweets
      description: You do not need to be authenticated to use this endpoint.
      parameters:
        - name: page
          in: query
          required: false
          description: The page number.
          schema:
            type: integer
            minimum: 1
        - name: replyTo
          in: query
          description: The ID of the tweet being replied to. We selected the replies of this specific tweet
          required: false
          schema:
            type: string
      responses:
        "200":
          description: All tweets are given
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/TweetHome"
                  page:
                    type: integer
                    description: Which page of tweets the user chosen
                    example: 1
                  limit:
                    type: integer
                    description: If the limit is 10, thus each page will display 10 tweets
                    example: 10
                  totalPages:
                    type: integer
                    description: total number of pages
                    example: 1
                  totalResults:
                    type: integer
                    description: total number of tweets
                    example: 1
    post:
      summary: Create a New Tweet
      description: Endpoint to create a new tweet or reply to a tweet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The text content of the tweet.
                  example: "Hello\n"
                replyTo:
                  type: string
                  description: The ID of the tweet to which the user is replying to it. The 'replyTo' is only used for replying to a tweet.
                  example: "658b0196af1de21810969b89"
              required:
                - text
      security:
        - jwtAuth: []
      responses:
        "201":
          description: Tweet created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tweet:
                    $ref: "#/components/schemas/Tweet"
        "400":
          description: |
            Tweet was not created. This can occur if the text has more than 280 characters:
            - \"text\" length must be less than or equal to 280 characters long
            It can occur also if the tweet's ID given is invalid:
            - \"replyTo\" must be a valid mongo id
        "401":
          description: |
            Tweet was not created. This can occur if the user's token given is invalid:
            - You are not authenticated
  /tweets/{tweetId}:
    get:
      summary: Get a tweet by ID
      parameters:
        - name: tweetId
          in: path
          required: true
          description: The ID of the tweet
          schema:
            type: string
      responses:
        "200":
          description: Specific tweet is given
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/TweetHome"
        "400":
          description: |
            This can also occur also if the tweet's ID given is invalid:
            - \"tweetId\" must be a valid mongo id
    delete:
      summary: Delete a tweet
      description: Endpoint to delete a specific tweet.
      parameters:
        - in: path
          name: tweetId
          required: true
          description: The ID of the tweet to delete.
          schema:
            type: string
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Tweet deleted successfully. It returns the data of the deleted tweet.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tweet:
                    $ref: "#/components/schemas/Tweet"
        "400":
          description: |
            This can also occur also if the tweet's ID given is invalid:
            - \"tweetId\" must be a valid mongo id
        "401":
          description: |
            Tweet was not created. This can occur if the user's token given is invalid:
            - You are not authenticated
        "403":
          description: |
            Tweet was not deleted. This can occur if the user is trying to delete another user's tweet:
            - You cannot delete someone's tweet
        "404":
          description: |
            Tweet was not deleted. This can occur if the tweet was already deleted:
            - Tweet not found
  /tweets/like/{tweetId}:
    post:
      summary: Like a tweet
      description: Endpoint to like a specific tweet.
      parameters:
        - in: path
          name: tweetId
          required: true
          description: The ID of the tweet to like.
          schema:
            type: string
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Tweet liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tweet:
                    $ref: "#/components/schemas/Tweet"
        "400":
          description: |
            Tweet was not liked. This can occur if:
            - User already likes a tweet
            This can also occur also if the tweet's ID given is invalid:
            - \"tweetId\" must be a valid mongo id
        "401":
          description: |
            Tweet was not created. This can occur if the user's token given is invalid:
            - You are not authenticated
    delete:
      summary: Remove Like from Tweet
      description: Removes the like from a specific tweet.
      parameters:
        - in: path
          name: tweetId
          required: true
          description: The ID of the tweet to remove the like from.
          schema:
            type: string
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Tweet liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tweet:
                    $ref: "#/components/schemas/Tweet"
        "400":
          description: |
            Tweet was not created. This can occur also if the tweet's ID given is invalid:
            - \"tweetId\" must be a valid mongo id
        "401":
          description: |
            Tweet was not created. This can occur if the user's token given is invalid:
            - You are not authenticated
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
        description: The ID of the user
    get:
      summary: Get user by ID
      description: Get user's details based on the given user's ID.
      security:
        - jwtAuth: []
      responses:
        "200":
          description: We get the specific user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: |
            We do not get the user. This can occur if the user's token given is invalid:
            - You are not authenticated
        "403":
          description: |
            We do not get the user. This can occur if the user's ID given is invalid:
            - You are not authorized
    patch:
      summary: Update user profile information
      description: Update specific user details (name, avatar) based on the given user's ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
                  format: uri
            example:
              name: "Johnny"
              avatar: "https://picsum.photos/70/70"
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: |
            The user do not give a valid URL for the avatar:
            - \"avatar\" must be a valid url
        "401":
          description: |
            This can occur if the user's token given is invalid:
            - You are not authenticated
        "403":
          description: |
            This can occur if the user's ID given is invalid:
            - You are not authorized
    delete:
      summary: Delete user's account
      description: Delete user's acccount
      security:
        - jwtAuth: []
      responses:
        "200":
          description: The user's account is deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: |
            This can occur if the user's token given is invalid:
            - You are not authenticated
        "403":
          description: |
            This can occur if the user's ID given is invalid or a user is trying to cancel another user's account:
            - You are not authorized
  /profiles/:
    get:
      summary: Get a list of user profiles
      description: You do not need to be authenticated to use this endpoint.
      parameters:
        - name: page
          in: query
          required: false
          description: The page number.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: User profile information is given
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/profile"
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    description: maximum number of profiles per page
                    example: 10
                  totalPages:
                    type: integer
                    description: total number of pages available
                    example: 1
                  totalResults:
                    type: integer
                    description: total number of user profiles
                    example: 1
  /profiles/{userId}:
    get:
      summary: Get user profile by using profile's ID
      parameters:
        - name: userId
          in: path
          required: true
          description: user's ID used in order to retrieve profile information (The user can be anonymous, thus authorization is not needed )
          schema:
            type: string
      responses:
        "200":
          description: User profile information is given
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: "#/components/schemas/profile"
        "400":
          description: |
            This can occur if the profile's ID is wrong:
              - \"userId\" must be a valid mongo id
    patch:
      summary: Update user profile information
      description: Update specific user profile details (bio, location, website, backgroundImage) based on the given user's ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                location:
                  type: string
                website:
                  type: string
                backgroundImage:
                  type: string
                  format: uri
              example:
                bio: "Blood type A+   Age 23"
                location: "Boulevard street 10+"
                website: "john.com"
                backgroundImage: "https://picsum.photos/id/866/600/400"
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successful update
          content:
            application/json:
              example:
                profile:
                  following: []
                  followers: []
                  likes: []
                  retweets: []
                  _id: "658d191aad796c0d54d1696a"
                  user: "658d191aad796c0d54d16968"
                  createdAt: "2023-12-28T06:43:38.705Z"
                  updatedAt: "2023-12-28T06:50:36.846Z"
                  __v: 0
                  bio: "Blood type A+   Age 23"
                  backgroundImage: "https://picsum.photos/id/866/600/400"
                  location: "Boulevard street 10+"
                  website: "john.com"
        "400":
          description: |
            The user do not give any info to change. The payload is empty:
              - \"body\" must have at least 1 key.
              
            The user cannot change the name using this endpoint:
              - \"name\" is not allowed 
              
            The user cannot change the avatar using this endpoint:
              - \"avatar\" is not allowed 
              
            The user gives an invalid URL for the background image:
              - \"backgroundImage\" must be a valid url
        "401":
          description: |
            This can occur if the user's token given is invalid:
              - You are not authenticated
        "403":
          description: |
            This can occur if the user's ID given is invalid:
              - You are not authorized
  /profiles/follow/{profileId}:
    post:
      summary: Follow a user's profile
      parameters:
        - name: profileId
          in: path
          required: true
          description: ID of the profile to follow
          schema:
            type: string
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: "#/components/schemas/follow"
        "400":
          description: |
            This can occur if the profile's ID is wrong:
              - \"userId\" must be a valid mongo id
              
            This can occur if the user is trying to follow his own profile:
              - You cannot follow your own profile
        "401":
          description: |
            This can occur if the user's token given is invalid:
              - You are not authenticated

    delete:
      summary: Unfollow a profile
      parameters:
        - name: profileId
          in: path
          required: true
          description: ID of the profile to unfollow
          schema:
            type: string
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    $ref: "#/components/schemas/follow"
        "400":
          description: |
            This can occur if the profile's ID is wrong:
              - \"userId\" must be a valid mongo id
              
            This can occur if the user is trying to unfollow his own profile:
              - You cannot unfollow your own profile
        "401":
          description: |
            This can occur if the user's token given is invalid:
              - You are not authenticated
components:
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    User:
      type: object
      properties:
        role:
          type: string
          description: The user's role, which is set to "user" for a regular user
          example: user
        _id:
          type: string
          description: The unique identifier for the user (the user's ID)
          example: "658af666af1de21810969ad9"
        name:
          type: string
          description: The user's name
          example: John
        email:
          type: string
          description: The user's email address
          example: john@gmail.com
        username:
          type: string
          description: The user's username
          example: john
        createdAt:
          type: string
          description: The timestamp indicating when the user account was created
          example: "2023-12-26T15:51:02.592Z"
        updatedAt:
          type: string
          description: The timestamp indicating when the user account was last updated
          example: "2023-12-26T15:51:02.592Z"
        __v:
          type: integer
          description: ????????????????????????????????
          example: 0
        avatar:
          type: string
          description: URL of an image that is used for the avatar (If the avatar textbox is empty, it do not appear in the response)
          example: "https://picsum.photos/70/70"
    Token:
      type: string
      description: It represents the identity of the user and it is used for authentication
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NThhZjY2NmFmMWRlMjE4MTA5NjlhZDkiLCJpYXQiOjE3MDM2MDU4NjIsImV4cCI6MTcwMzYwOTQ2Mn0.FUvm5RJiUR6igTq9RY0mZlgRpo_Ctp4z8-8D9M70hjQ"
    Tweet:
      type: object
      properties:
        repliesCount:
          type: number
          example: 0
          description: The number of replies to this tweet. In this example, there are zero replies.
        edited:
          type: boolean
          example: false
          description: ?????????????????????????????????????????
        likes:
          type: array
          items:
            type: string
          example: []
          description: An array of users that liked this tweet. In this example, there are zero likes.
        retweets:
          type: array
          items:
            type: string
          example: []
          description: The number of times this tweet has been shared or reposted by other users. In this example, there are zero retweets.
        _id:
          type: string
          example: "65868b85331b1611dc953fbb"
          description: The unique identifier of the tweet.
        text:
          type: string
          example: "Hello\n"
          description: The text content of the tweet.
        replyTo:
          type: string
          example: 658bdc923bd5b22b342461d4
          description: The ID of the tweet this tweet is replying to. This property is present only for replies.
        author:
          type: string
          example: "65867ca2331b1611dc953ee8"
          description: The unique identifier of the user who authored the tweet.
        createdAt:
          type: string
          example: "2023-12-23T07:25:57.198Z"
          description: The timestamp indicating when the tweet was created.
        updatedAt:
          type: string
          example: "2023-12-23T07:25:57.198Z"
          description: The timestamp indicating when the tweet was last updated.
        __v:
          type: number
          example: 0
          description: ??????????????????????????????????????????????
    TweetHome:
      type: object
      properties:
        repliesCount:
          type: number
          example: 0
          description: The number of replies to this tweet. In this example, there are zero replies.
        edited:
          type: boolean
          example: false
          description: ?????????????????????????????????????????
        likes:
          type: array
          items:
            type: string
          example: []
          description: An array of users that liked this tweet. In this example, there are zero likes.
        retweets:
          type: array
          items:
            type: string
          example: []
          description: The number of times this tweet has been shared or reposted by other users. In this example, there are zero retweets.
        _id:
          type: string
          example: "65868b85331b1611dc953fbb"
          description: The unique identifier of the tweet.
        text:
          type: string
          example: "Hello\n"
          description: The text content of the tweet.
        author:
          type: object
          properties:
            _id:
              type: string
              example: "658e6b711922c72fc0c600fc"
            name:
              type: string
              example: "John"
            username:
              type: string
              example: "john"
        createdAt:
          type: string
          example: "2023-12-23T07:25:57.198Z"
          description: The timestamp indicating when the tweet was created.
        updatedAt:
          type: string
          example: "2023-12-23T07:25:57.198Z"
          description: The timestamp indicating when the tweet was last updated.
        __v:
          type: number
          example: 0
          description: ??????????????????????????????????????????????
    follow:
      type: object
      properties:
        following:
          type: array
          items:
            type: string
          description: An array of all the users' profile ID that the current user is following. In this array, the current user is following one user's profile
          example: ["658e6b8f1922c72fc0c60106"]
        followers:
          type: array
          items:
            type: string
          description: An array of all the users' profile ID that are following the currrent user. In this example, the array is empty, thus there are no followers.
          example: []
        likes:
          type: array
          items:
            type: string
          description: An array of tweets' ID liked. In this example, the array is empty, thus the user didn't like any tweet.
          example: []
        retweets:
          type: array
          items:
            type: string
          description: An array of tweets' ID that have been retweeted. In this example, the array is empty, thus no retweets.
          example: []
        _id:
          type: string
          description: The user's profile ID
          example: 658e6b711922c72fc0c600fe
        user:
          type: string
          description: The user's ID
          example: 658e6b711922c72fc0c600fc
        createdAt:
          type: string
          format: date-time
          description: The timestamp indicating when the profile was created.
          example: "2023-12-29T06:47:13.846Z"
        updatedAt:
          type: string
          format: date-time
          description: The timestamp indicating when the profile was last updated.
          example: "2023-12-29T06:53:20.208Z"
        __v:
          type: integer
          description: ??????????????????????
    profile:
      type: object
      description: This response is almost the same as the component "follow". It differs only in the "user" part. In this case the "user" is an object with 3 info (ID, name, username)
      properties:
        following:
          type: array
          items:
            type: string
          example: []
        followers:
          type: array
          items:
            type: string
          example: []
        likes:
          type: array
          items:
            type: string
          example: []
        retweets:
          type: array
          items:
            type: string
          example: []
        _id:
          type: string
          example: "658e6b711922c72fc0c600fe"
        user:
          type: object
          properties:
            _id:
              type: string
              example: "658e6b711922c72fc0c600fc"
            name:
              type: string
              example: "John"
            username:
              type: string
              example: "john"
        createdAt:
          type: string
          format: date-time
          example: "2023-12-29T06:47:13.846Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-12-29T08:17:15.079Z"
        __v:
          type: integer
          example: 28
